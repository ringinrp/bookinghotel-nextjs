// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Room {
  id          String @id @default(cuid())
  name        String
  description String @db.Text
  image       String
  price       Int
  capacity    Int    @default(1)

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt

  RoomAmenities RoomAmenities[]
  Reservation   Reservation[]
}

model Amenities {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt

  RoomAmenities RoomAmenities[]
}

model RoomAmenities {
  id          String    @id @default(cuid())
  roomId      String
  Room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  amenitiesId String
  Amenities   Amenities @relation(fields: [amenitiesId], references: [id], onDelete: Cascade)
}

model Reservation {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  price     Int
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  roomId String
  Room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

  Payment Payment?

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt
}

model Payment {
  id            String      @id @default(cuid())
  method        String?
  amount        Int
  Status        String      @default("unpaid")
  reservationId String      @unique
  Reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAT     DateTime    @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String    @default("user")
  phone         String?
  Account       Account[]

  createdAt DateTime @default(now())
  updatedAT DateTime @updatedAt

  // @@map("users")
  Reservation Reservation[]
}
